@extend(ft4.auth.auth_handler)
function () = ft4.auth.add_auth_handler(flags = []);

operation equip_fishing_rod(project: name, collection: name, id: integer) {
  val account = ft4.auth.authenticate();

  val pfp = require(pfps.get_equipped_pfp(account.id)?.pfp, "PFP not found");

  val fishing_rod = fishing_rod @ { .token.id == id };
  require(
    yours.token_balance @? { account, fishing_rod.token } != null,
    "Not the owner of the token"
  );

  create equipped_fishing_rod ( pfp, fishing_rod );
}

operation unequip_fishing_rod() {
  val account = ft4.auth.authenticate();

  val pfp = require(pfps.get_equipped_pfp(account.id)?.pfp, "No equipped PFP");
  val equipped_fishing_rod = require(equipped_fishing_rod @? { pfp }, "No equipped fishing rod");
  require(
    yours.token_balance @? { account, equipped_fishing_rod.fishing_rod.token } != null,
    "Not the owner of the token"
  );

  delete equipped_fishing_rod;
}

operation pull() {
  val account = ft4.auth.authenticate();

  val pfp = require(pfps.get_equipped_pfp(account.id)?.pfp, "No equipped PFP");
  val stats = _ensure_stats(pfp);
  stats.fishes_caught += 1;

  val fishing_rod = require(equipped_fishing_rod @? { pfp } ( .fishing_rod ), "No equipped fishing rod");
  fishing_rod.durability -= 1;

  if (fishing_rod.durability <= 0) {
    delete equipped_fishing_rod @? { fishing_rod };
    delete fishing_rod;
  }

  val random_nr = random.number(100);
  if (random_nr < 10) {
    val available_equipments = equipments.get_all_equipments();
    val equipment = available_equipments[random_nr % available_equipments.size()];
    equipments.mint(equipment.token, account, 1);
  } else {
    val fishes = fish @* { };
    val fish = fishes[random_nr % fishes.size()];
    yours.mint(fish.token, yours.balance_info(account, 1));
  }
}

operation buy_fishing_rod(name: text) {
  val account = ft4.auth.authenticate();
  _mint_fishing_rod(name, account);
}
